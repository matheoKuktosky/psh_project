[{"C:\\Users\\mathe\\Desktop\\project\\front\\react-app\\src\\index.js":"1","C:\\Users\\mathe\\Desktop\\project\\front\\react-app\\src\\App.js":"2"},{"size":176,"mtime":1608267199554,"results":"3","hashOfConfig":"4"},{"size":2710,"mtime":1608272062974,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1xg7l6j",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\mathe\\Desktop\\project\\front\\react-app\\src\\index.js",[],["12","13"],"C:\\Users\\mathe\\Desktop\\project\\front\\react-app\\src\\App.js",["14"],"import React, { Component } from 'react';\nimport Axios from 'axios';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      players: []\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);        \n  }\n\n  submitStats(nickname, pImage, timestamp, score){\n    Axios.post(\"http://localhost:3001/api/insert\", \n    {\n      nickname: nickname,\n      pImage: pImage,\n      timestamp: timestamp,\n      score: score\n    }).then(()=>{\n      alert(\"Successful insert!\");\n    })\n  };\n  randomNumber(max, min){\n    return Math.floor(Math.random() * (max + 1 - min)) + min; \n  }\n  \n  componentDidMount(){\n    fetch(`https://randomuser.me/api/?results=${this.randomNumber(10, 0)}`).then(response =>{\n      if(response.ok) return response.json();\n      throw new Error('Request failed.');\n    })\n    .then(data =>{\n      this.setState({players: data.results});\n      this.state.players.map((p, i) => {\n        let currentdate = new Date();\n        let timestamp = currentdate.getDate() + \"-\"\n        + (currentdate.getMonth()+1)  + \"-\" \n        + currentdate.getFullYear() + \"  \"  \n        + (currentdate.getHours() < 10? \"0\":\"\") + currentdate.getHours() + \":\"  \n        + (currentdate.getMinutes() < 10? \"0\":\"\") + currentdate.getMinutes() + \":\" \n        + (currentdate.getSeconds() < 10? \"0\":\"\") + currentdate.getSeconds();\n        console.log(i, p.login.username, p.picture.thumbnail, this.randomNumber(100,1), timestamp);\n        this.submitStats(p.login.username, p.picture.thumbnail, this.randomNumber(100,1), timestamp);\n      });      \n    })\n    .catch(error => {\n      console.log(error);\n    });\n    setTimeout(this.componentDidMount, 5000);\n  }\n \n  render(){    \n    const list = this.state.players.map((p, i) => {\n      let currentdate = new Date();\n      let timestamp = currentdate.getDate() + \"-\"\n      + (currentdate.getMonth()+1)  + \"-\" \n      + currentdate.getFullYear() + \"  \"  \n      + (currentdate.getHours() < 10? \"0\":\"\") + currentdate.getHours() + \":\"  \n      + (currentdate.getMinutes() < 10? \"0\":\"\") + currentdate.getMinutes() + \":\" \n      + (currentdate.getSeconds() < 10? \"0\":\"\") + currentdate.getSeconds();\n      return <Player key={i} username={p.login.username} profile={p.picture.thumbnail} score={this.randomNumber(100,1)} timestamp={timestamp} />;\n    });\n    return(\n      <div>\n        <h1>Players:</h1>\n        {list}\n      </div>\n    );\n  }\n}\n\nclass Player extends Component{  \n  render(){\n      return(\n          <div>\n              <p>{this.props.username}</p>\n              <p>{this.props.profile}</p>\n              <p>{this.props.score}</p>\n              <p>{this.props.timestamp}</p>\n          </div>\n      );\n  }\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":35,"column":37,"nodeType":"21","messageId":"22","endLine":35,"endColumn":39},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]